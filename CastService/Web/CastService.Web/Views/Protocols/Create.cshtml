@using CastService.Web.ViewModels.Protocols
@model DetailsProtocolViewModel
@{
    ViewBag.Title = "Нов протокол";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h3>Нов протокол</h3>
        @Html.ValidationSummary(true, "", new { @class = "control-label text-danger" })
        <div class="form-group">
            @Html.EditorFor(m => m.CustomerId, new { ListItem = Model.CustomersNames })

            <div class="col-md-3">
                @Html.LabelFor(model => model.ObjectType, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ObjectType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ObjectType, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.ObjectNumber, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ObjectNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ObjectNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.EditorFor(m => m.UserId, new { ListItem = Model.UserNames })

            <div class="col-md-6">
                @Html.LabelFor(model => model.CustomerRepresentative, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.CustomerRepresentative, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CustomerRepresentative, "", new { @class = "text-danger" })
            </div>
            
        </div>
        <div class="form-group">
            <div class="col-md-2">
                @Html.LabelFor(model => model.ProtocolDate, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ProtocolDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProtocolDate, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-2">
                @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2">
                @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.ObjectDriver, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ObjectDriver, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ObjectDriver, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-6">
                @Html.LabelFor(model => model.PerformedDiagnostic, htmlAttributes: new { @class = "control-label control-label" })
                <br />
                @Html.EditorFor(model => model.PerformedDiagnostic, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PerformedDiagnostic, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.DetectedFauls, htmlAttributes: new { @class = "control-label control-label" })
                <br />
                @Html.EditorFor(model => model.DetectedFauls, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DetectedFauls, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4">
                @Html.LabelFor(model => model.PersonMadeRequest, htmlAttributes: new { @class = "control-label control-label" })
                <br />
                @Html.EditorFor(model => model.PersonMadeRequest, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PersonMadeRequest, "", new { @class = "text-danger" })

            </div>
            <div class="col-md-2">
                @Html.LabelFor(model => model.RequestDate, htmlAttributes: new { @class = "control-label control-label" })
                <br />
                @Html.EditorFor(model => model.RequestDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RequestDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.LabelFor(m => m.IsWarrantyService)
                <br />
                @Html.RadioButtonFor(m => m.IsWarrantyService, true, new { id = "is-warranty-service" })
                @Html.Label("is-warranty-service", "Гаранционно")
                <br />
                @Html.RadioButtonFor(m => m.IsWarrantyService, false, new { id = "not-warranty-service" })
                @Html.Label("not-warranty-service", "Извънгаранционно")
            </div>
            <div class="col-md-3">
                <br />
                @Html.RadioButtonFor(m => m.WithSubscriptionService, true, new { id = "with-subscription-service" })
                @Html.Label("with-subscription-service", "Абонаментно")
                <br />
                @Html.RadioButtonFor(m => m.WithSubscriptionService, false, new { id = "on-request-service" })
                @Html.Label("on-request-service", "По заявка")
            </div>
        </div>

        <div class="col-md-4"><h4><strong>Монтирано оборудване</strong></h4></div>
        <div class="col-md-1"><input type="button" id="add-equipment-button" value="Добави" class="btn btn-info" /></div>
        <div class="col-md-6"><input type="button" id="remove-equipment-button" value="Изтрий" class="btn btn-danger" /></div>

        <table class="table table-striped" id="equipment-table">
            <tr>
                <th>Име</th>
                <th>Стар сериен №</th>
                <th>Нов сериен №</th>
                <th>Количество</th>
                <th></th>
            </tr>
            @if (Model.ChangedEquipment != null)
            {
                for (int i = 0; i < Model.ChangedEquipment.Count(); i++)
                {
                    <tr>
                        <td>
                            @Html.HiddenFor(m => m.ChangedEquipment[i].Id)
                            @Html.DisplayFor(m => m.ChangedEquipment[i].EquipmentName)
                        </td>
                        <td>
                            @Html.HiddenFor(m => m.ChangedEquipment[i].OldSerialNumber)
                            @Html.DisplayFor(m => m.ChangedEquipment[i].OldSerialNumber)
                        </td>
                        <td>
                            @Html.HiddenFor(m => m.ChangedEquipment[i].NewSerialNumber)
                            @Html.DisplayFor(m => m.ChangedEquipment[i].NewSerialNumber)
                        </td>
                        <td>
                            @Html.HiddenFor(m => m.ChangedEquipment[i].Quantity)
                            @Html.DisplayFor(m => m.ChangedEquipment[i].Quantity)
                        </td>
                    </tr>
                }
            }
        </table>

        <h3>Клиентът получи</h3>
        <div class="form-group">
            <div class="col-md-2">
                <br />
                @Html.EditorFor(model => model.HasCustomerProtocol)
                @Html.LabelFor(model => model.HasCustomerProtocol, htmlAttributes: new { @class = "control-label" })
                @Html.ValidationMessageFor(model => model.HasCustomerProtocol, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2">
                @Html.LabelFor(model => model.InvoiceNumber, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.InvoiceNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InvoiceNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2">
                @Html.LabelFor(model => model.InvoiceDate, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.InvoiceDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.WarrantyCardNumber, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.WarrantyCardNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.WarrantyCardNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.Other, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Other, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Other, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-2">
                @Html.LabelFor(model => model.WorkInHours, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-1">
                @Html.EditorFor(model => model.WorkInHours, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-1">
                <p class="control-label"><strong> часа X </strong></p>
            </div>
            <div class="col-md-2">
                @Html.EditorFor(model => model.PricePerHour, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-1">
                <p class="control-label"><strong>лв/час</strong></p>
            </div>
            <div class="col-md-2">
                @Html.TextBox("result-labor", null, new { @class = "form-control" })
            </div>

        </div>
        <div class="form-group">
            <div class="col-md-4">
                @Html.LabelFor(model => model.PriceForChangedEguipment, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-2">
                @Html.EditorFor(model => model.PriceForChangedEguipment, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-1">
            </div>
            <div class="col-md-2">
                @Html.TextBox("result-equipment", null, new { @class = "form-control" })
            </div>

        </div>
        <div class="form-group">
            <div class="col-md-2">
                @Html.LabelFor(model => model.DistanceInKm, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-1">
                @Html.EditorFor(model => model.DistanceInKm, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-1">
                <p class="control-label"><strong> X </strong></p>
            </div>
            <div class="col-md-2">
                @Html.EditorFor(model => model.PricePerKm, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-1">
                <p class="control-label"><strong>лв/км</strong></p>
            </div>
            <div class="col-md-2">
                @Html.TextBox("result-distance", null, new { @class = "form-control" })
            </div>
        </div>

        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Запис" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div id="add-equipment" title="Изберете артикул">
    <br />
    <div class="form-horizontal">
        <div class="form-group">
            <label for="equipment" class="col-md-3">Артикул</label>
            <input type="text" name="equipment" id="equipment" class="text ui-widget-content ui-corner-all col-md-9" />
            <input type="hidden" name="equipment-id" id="equipment-id" />

        </div>
        <div class="form-group">
            <label for="equipment-old-serial-number" class="col-md-3">Стар сериен №</label>
            <input type="text" name="equipment-old-serial-number" id="equipment-old-serial-number" class="text ui-widget-content ui-corner-all col-md-4" />
        </div>
        <div class="form-group">
            <label for="equipment-new-serial-number" class="col-md-3">Нов сериен №</label>
            <input type="text" name="equipment-new-serial-number" id="equipment-new-serial-number" class="text ui-widget-content ui-corner-all col-md-4" />
        </div>
        <div class="form-group">
            <label for="equipment-quantity" class="col-md-3">Количество</label>
            <input type="text" name="equipment-quantity" id="equipment-quantity" class="text ui-widget-content ui-corner-all col-md-2" />
        </div>
    </div>
</div>
<div>
    @Html.ActionLink("Назад към списъка", "Index")
</div>

@section Scripts
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#add-equipment").hide();
            $("#add-equipment").dialog({
                autoOpen: false,
                height: 300,
                width: 700,
                modal: true,
                draggable: true,
                show: 'fade',
                hide: 'fade',
                dialogClass: 'ui-dialog-osx',
                buttons: {
                    "OK": function () {
                        add_equipment_row();
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });


            $("#add-equipment-button").click(function () {
                $("#equipment-id").val('');
                $("#equipment").val('');
                $("#equipment-quantity").val('');
                $("#equipment-old-serial-number").val('');
                $("#equipment-new-serial-number").val('');

                $("#add-equipment").dialog('open');
            });

            $("#remove-equipment-button").click(function () {
                var rowsCount = $('#equipment-table tbody tr').length;
                if (rowsCount > 1) {
                    $('#equipment-table tr:last').remove();
                }
            });

            $('#equipment').autocomplete({
                source: '@Url.Action("GetEquipment", "Installations")',
                select: function (event, ui) {
                    event.preventDefault();
                    $("#equipment").val(ui.item.label);
                    $("#equipment-id").val(ui.item.value);
                }
            });
        });

        function add_equipment_row() {
            var equipmentId = $("#equipment-id").val();
            var equipmentName = $("#equipment").val();
            var equipmentQty = $("#equipment-quantity").val();
            var equipmentOldSerialNumber = $("#equipment-old-serial-number").val();
            var equipmentNewSerialNumber = $("#equipment-new-serial-number").val();
            var rowsCount = $('#equipment-table tbody tr').length;

            rowsCount -= 1;
            var equipmentIdInput = '<input data-val="true" data-val-number="The field Id must be a number." data-val-required="The Id field is required." id="ChangedEquipment_' + rowsCount + '__Id" name="ChangedEquipment[' + rowsCount + '].Id" type="hidden" value="' + equipmentId + '">';

            var equipmentQuantityInput = '<input data-val="true" data-val-number="The field Id must be a number." data-val-required="The Id field is required." id="ChangedEquipment_' + rowsCount + '__Quantity" name="ChangedEquipment[' + rowsCount + '].Quantity" type="hidden" value="' + equipmentQty + '">';

            var equipmentOldSerialNumberInput = '<input  id="ChangedEquipment_' + rowsCount + '__OldSerialNumber" name="ChangedEquipment[' + rowsCount + '].OldSerialNumber" type="hidden" value="' + equipmentOldSerialNumber + '">';

            var equipmentNewSerialNumberInput = '<input  id="ChangedEquipment_' + rowsCount + '__NewSerialNumber" name="ChangedEquipment[' + rowsCount + '].NewSerialNumber" type="hidden" value="' + equipmentNewSerialNumber + '">';

            var newRowContent = "<tr><td>" + equipmentIdInput + equipmentName + "</td><td></td><td>" + equipmentOldSerialNumberInput + equipmentOldSerialNumber + "</td><td>" + equipmentNewSerialNumberInput + equipmentNewSerialNumber + "</td><td>" + equipmentQuantityInput + equipmentQty + "</td></tr>";

            $("#equipment-table tbody").append(newRowContent);

            $("#add-equipment").dialog('close');
        }
    </script>
}