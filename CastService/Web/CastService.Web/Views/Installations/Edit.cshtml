@using CastService.Web.ViewModels.Installations
@model DetailsInstallationViewModel
@{
    ViewBag.Title = "Редактиране на инсталация";
}
<div class="error alert alert-danger">
    <span class="close" data-dismiss="alert">&times;</span>
    <div id="error"></div>
</div>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h3>Редактиране на инсталация</h3>
        @Html.ValidationSummary(true, "", new { @class = "control-label text-danger" })
        <div class="form-group">
            @Html.EditorFor(m => m.CustomerId, new { ListItem = Model.CustomersNames })

            <div class="col-md-2">
                @Html.LabelFor(model => model.ObjectName, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ObjectName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ObjectName, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2">
                @Html.LabelFor(model => model.ObjectType, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ObjectType, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ObjectType, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2">
                @Html.LabelFor(model => model.ObjectNumber, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.ObjectNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ObjectNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.EditorFor(m => m.UserId, new { ListItem = Model.UserNames })
            <div class="col-md-2">
                @Html.LabelFor(model => model.InstallationDate, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.InstallationDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InstallationDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2">
                @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2">
                @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-2">
                @Html.LabelFor(model => model.GuessedTime, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.GuessedTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GuessedTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-6">
                @Html.LabelFor(model => model.DetectedFaults, htmlAttributes: new { @class = "control-label control-label" })
                <br />
                @Html.EditorFor(model => model.DetectedFaults, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DetectedFaults, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                @Html.LabelFor(model => model.AdditionalActivities, htmlAttributes: new { @class = "control-label control-label" })
                <br />
                @Html.EditorFor(model => model.AdditionalActivities, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AdditionalActivities, "", new { @class = "text-danger" })
            </div>
        </div>

        @* Equipment table*@
        <div class="col-md-4"><h4><strong>Монтирано оборудване</strong></h4></div>
        <div class="col-md-1"><input type="button" id="add-equipment-button" value="Добави" class="btn btn-info" /></div>
        <div class="col-md-6"><input type="button" id="remove-equipment-button" value="Изтрий" class="btn btn-danger" /></div>



        <table class="table" id="equipment-table">
            <tr>
                <th>Име</th>
                <th>Сериен №</th>
                <th>Количество</th>
                <th>Дължина</th>
                <th></th>
            </tr>
            @if (Model.InstalledEquipment != null)
            {
                for (int i = 0; i < Model.InstalledEquipment.Count(); i++)
                {
                    <tr>
                        <td>
                            @Html.HiddenFor(m => m.InstalledEquipment[i].Id)
                            @Html.DisplayFor(m => m.InstalledEquipment[i].EquipmentName)
                        </td>
                        <td>
                            @Html.HiddenFor(m => m.InstalledEquipment[i].SerialNumber)
                            @Html.DisplayFor(m => m.InstalledEquipment[i].SerialNumber)
                        </td>
                        <td>
                            @Html.HiddenFor(m => m.InstalledEquipment[i].Quantity)
                            @Html.DisplayFor(m => m.InstalledEquipment[i].Quantity)
                        </td>
                        <td>
                            @Html.HiddenFor(m => m.InstalledEquipment[i].EquipmentLength)
                            @Html.DisplayFor(m => m.InstalledEquipment[i].EquipmentLength)
                        </td>
                    </tr>
                }
            }
        </table>

        <hr />
        <h3>Клиентът получи</h3>
        <div class="form-group">
            <div class="col-md-12">
                <div>
                    @Html.EditorFor(model => model.HasProtocol)
                    @Html.LabelFor(model => model.HasProtocol, htmlAttributes: new { @class = "control-label" })
                    @Html.ValidationMessageFor(model => model.HasProtocol, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-3">
                @Html.LabelFor(model => model.InvoiceNumber, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.InvoiceNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InvoiceNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.InvoiceDate, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.InvoiceDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.WarrantyCardNumber, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.WarrantyCardNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.WarrantyCardNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.Other, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Other, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Other, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-2">
                @Html.LabelFor(model => model.WorkInHours, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-1">
                @Html.EditorFor(model => model.WorkInHours, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-1">
                <p class="control-label"><strong> часа X </strong></p>
            </div>
            <div class="col-md-2">
                @Html.EditorFor(model => model.PricePerHour, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-1">
                <p class="control-label"><strong>лв/час</strong></p>
            </div>
            <div class="col-md-2">
                <label id="resultLabor" class="control-label"></label>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-4">
                @Html.LabelFor(model => model.PriceForChangedEguipment, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-2">
                @Html.EditorFor(model => model.PriceForChangedEguipment, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-1">
            </div>
            <div class="col-md-2">
                <label id="resultEquipment" class="control-label"></label>
            </div>
        </div>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Редактирай" id="btnSubmit" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div id="add-equipment" title="Изберете артикул">
    <br />
    <div class="form-horizontal">
        <div id="input-equipment-error"></div>
        <div class="form-group">
            <label for="equipment" class="col-md-3">Артикул</label>
            <input type="text" name="equipment" id="equipment" class="text ui-widget-content ui-corner-all" />
            <input type="hidden" name="equipment-id" id="equipment-id" />

        </div>
        <div class="form-group">
            <label for="equipment-serial-number" class="col-md-3">Сериен №</label>
            <input type="text" name="equipment-serial-number" id="equipment-serial-number" class="text ui-widget-content ui-corner-all" />
        </div>
        <div class="form-group">
            <label for="equipment-quantity" class="col-md-3">Количество</label>
            <input type="text" name="equipment-quantity" id="equipment-quantity" class="text ui-widget-content ui-corner-all" />
        </div>
        <div class="form-group">
            <label for="equipment-length" class="col-md-3">Дължина</label>
            <input type="text" name="equipment-length" id="equipment-length" class="text ui-widget-content ui-corner-all" />
        </div>
    </div>
</div>
<div>
    @Html.ActionLink("Назад към списъка", "Index")
</div>

@section Scripts
{
    <script type="text/javascript" src="~/Scripts/jquery.maskedinput.min.js"></script>
    <script type="text/javascript" src="~/Scripts/validations.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('.error').hide();
            $("#add-equipment").hide();
            $("#add-equipment").dialog({
                autoOpen: false,
                height: 400,
                width: 700,
                modal: true,
                draggable: true,
                show: 'fade',
                hide: 'fade',
                dialogClass: 'ui-dialog-osx',
                buttons: [
                {
                    text: "Добави",
                    class: 'btn btn-primary',
                    click: function () {
                        if (!valudate_equipment()) {
                            return;
                        }
                        add_equipment_row();
                    }
                },
                {
                    text: "Изход",
                    class: 'btn btn-default',
                    click: function () {
                        $(this).dialog("close");
                    }
                }],
            });


            $("#add-equipment-button").click(function () {
                $("#equipment-id").val('');
                $("#equipment").val('');
                $("#equipment-quantity").val('');
                $("#equipment-length").val('');
                $("#equipment-serial-number").val('');

                $("#add-equipment").dialog('open');
            });

            $("#remove-equipment-button").click(function () {
                var rowsCount = $('#equipment-table tbody tr').length;
                if (rowsCount > 1) {
                    $('#equipment-table tr:last').remove();
                }
            });

            $('#equipment').autocomplete({
                source: '@Url.Action("GetEquipment", "Installations")',
                select: function (event, ui) {
                    event.preventDefault();
                    $("#equipment").val(ui.item.label);
                    $("#equipment-id").val(ui.item.value);
                }
            });

            $('#btnSubmit').click(function (event) {
                var customerId = $('#CustomerId').val();
                var userId = $('#UserId').val();

                if (customerId === "0") {
                    $('#error').text("Не е въведен клиент");
                    $('.error').show();
                    event.preventDefault();
                    return;
                }

                if (userId === "0") {
                    $('#error').text("Не е въведен представител на изпълнителя");
                    $('.error').show();
                    event.preventDefault();
                    return;
                }

            });

            $("#WorkInHours").on('change paste', function () {
                calculateWorkHours();
            });
            $("#PricePerHour").on('change paste', function () {
                calculateWorkHours();
            });

            $("#PriceForChangedEguipment").on('change paste', function () {
                $("#resultEquipment").text(parseFloat($("#PriceForChangedEguipment").val()).toFixed(2));
            });

            $("#equipment-quantity").ForceNumericOnly();
            $("#equipment-length").ForceNumericOnly();
            $("#WorkInHours").ForceNumericOnly();
            $("#PricePerHour").ForceFloatOnly();

            $("#InstallationDate").mask("99/99/9999", { placeholder: "дд/мм/гггг" });
            $("#InvoiceDate").mask("99/99/9999", { placeholder: "дд/мм/гггг" });
            $("#StartTime").mask("99:99", { placeholder: "чч:мм" });
            $("#EndTime").mask("99:99", { placeholder: "чч:мм" });
        });

        function valudate_equipment() {
            if ($("#equipment-id").val() === '') {
                $("#input-equipment-error").text("Полето за артикул е задължително или няма такъв артикул");
                $("#input-equipment-error").css("color", "Red");
                return false;
            }

            return true;
        }


        function calculateWorkHours() {
            var result = (parseInt($("#WorkInHours").val()) * parseFloat($("#PricePerHour").val())).toFixed(2);
            $("#resultLabor").text(result);
        }

        function add_equipment_row() {
            var equipmentId = $("#equipment-id").val();
            var equipmentName = $("#equipment").val();
            var equipmentQty = $("#equipment-quantity").val() || 1;
            var equipmentLength = $("#equipment-length").val() || 0;
            var equipmentSerialNumber = $("#equipment-serial-number").val();
            var rowsCount = $('#equipment-table tbody tr').length;

            rowsCount -= 1;
            var equipmentIdInput = '<input data-val="true" data-val-number="The field Id must be a number." data-val-required="The Id field is required." id="InstalledEquipment_' + rowsCount + '__Id" name="InstalledEquipment[' + rowsCount + '].Id" type="hidden" value="' + equipmentId + '">';

            var equipmentQuantityInput = '<input data-val="true" data-val-number="The field Id must be a number." data-val-required="The Id field is required." id="InstalledEquipment_' + rowsCount + '__Quantity" name="InstalledEquipment[' + rowsCount + '].Quantity" type="hidden" value="' + equipmentQty + '">';

            var equipmentSerialNumberInput = '<input  id="InstalledEquipment_' + rowsCount + '__SerialNumber" name="InstalledEquipment[' + rowsCount + '].SerialNumber" type="hidden" value="' + equipmentSerialNumber + '">';

            var equipmentLengthInput = '<input  id="InstalledEquipment_' + rowsCount + '__EquipmentLength" name="InstalledEquipment[' + rowsCount + '].EquipmentLength" type="hidden" value="' + equipmentLength + '">';

            var newRowContent = "<tr><td>" + equipmentIdInput + equipmentName + "</td><td>" + equipmentSerialNumberInput + equipmentSerialNumber + "</td><td>" + equipmentQuantityInput + equipmentQty + "</td><td>" + equipmentLengthInput + equipmentLength + "</td></tr>";

            $("#equipment-table tbody").append(newRowContent);

            $("#add-equipment").dialog('close');
        }
    </script>
}